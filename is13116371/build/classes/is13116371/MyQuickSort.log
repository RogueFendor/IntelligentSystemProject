public class MyQuickSort {
     
    private double array[];
    private double ArrayList<double> pops;
    private int length;
 
    public void sort(double[] inputArr,double ArrayList<double> populations;) {
         
        if (inputArr == null || inputArr.length == 0) {
            return;
        }
        this.array = inputArr;
        this.pops = populations;
        length = inputArr.length;
        quickSort(0, length - 1);
    }
    public void quickSort(int lowerIndex, int higherIndex) {
        int i = lowerIndex;
        int j = higherIndex;
        // calculate pivot number, I am taking pivot as middle index number
        int pivot = array[lowerIndex+(higherIndex-lowerIndex)/2];
        // Divide into two arrays
        while (i <= j) {
            while (array[i] < pivot) {
                i++;
            }
            while (array[j] > pivot) {
                j--;
            }
            if (i <= j) {
                exchangeNumbers(i, j);
                exchangeArrays(i,j);
                i++;
                j--;
            }
        }
        // call quickSort() method recursively
        if (lowerIndex < j)
            quickSort(lowerIndex, j);
        if (i < higherIndex)
            quickSort(i, higherIndex);
    }
    private void exchangeNumbers(int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
     private void exchangeArrays(int i, int j) {
        double [] temp = this.pops.get(i);
        this.pops.add(i,this.pops.get(j));
        this.pops.add(j,tmp);
}